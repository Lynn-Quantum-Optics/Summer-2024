# This file is used to generate the plots used in the summer 2024 poste
# 

# file to read and process experimentally collected density matrices
import numpy as np
from os.path import join, dirname, abspath
import pandas as pd
from tqdm import tqdm
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import random

from uncertainties import ufloat
from uncertainties import unumpy as unp

from sample_rho import *
from rho_methods import *

def make_plots_E0(DATA_PATH, file_name):
    '''Reads in df generated by analyze_rhos and plots witness value comparisons as well as fidelity and purity
    __
    dfname: str, name of df to read in
    num_plots: int, number of separate plots to make (based on eta)
    '''

    # read in df
    df = pd.read_csv(join(DATA_PATH, file_name))
    eta_vals = df['eta'].unique()

    
    fig, ax = plt.subplots(figsize = (8, 8))
    # get df for each eta
    df_eta = df
    purity_eta = df_eta['purity'].to_numpy()
    fidelity_eta = df_eta['fidelity'].to_numpy()
    chi_eta = df_eta['chi'].to_numpy()
    adj_fidelity = df_eta['AT_fidelity'].to_numpy()

    # # do purity and fidelity plots
    # ax[1,i].scatter(chi_eta, purity_eta, label='Purity', color='gold')
    # ax[1,i].scatter(chi_eta, fidelity_eta, label='Fidelity', color='turquoise')

    # # plot adjusted theory purity
    # ax[1,i].plot(chi_eta, adj_fidelity, color='turquoise', linestyle='dashed', label='AT Fidelity')

    # extract witness values
    W_min_T = df_eta['W_min_T'].to_numpy()
    W_min_AT = df_eta['W_min_AT'].to_numpy()
    W_min_expt = df_eta['W_min_expt'].to_numpy()
    W_min_unc = df_eta['W_min_unc'].to_numpy()

    Wp_T = df_eta[['Wp_t1_T', 'Wp_t2_T', 'Wp_t3_T']].min(axis=1).to_numpy()
    Wp_AT = df_eta[['Wp_t1_AT', 'Wp_t2_AT', 'Wp_t3_AT']].min(axis=1).to_numpy()
    Wp_expt = df_eta[['Wp_t1_expt', 'Wp_t2_expt', 'Wp_t3_expt']].min(axis=1).to_numpy()
    Wp_expt_min = df_eta[['Wp_t1_expt', 'Wp_t2_expt', 'Wp_t3_expt']].idxmin(axis=1)
    Wp_unc = np.where(Wp_expt_min == 'Wp_t1_expt', df_eta['Wp_t1_unc'], np.where(Wp_expt_min == 'Wp_t2_expt', df_eta['Wp_t2_unc'], df_eta['Wp_t3_unc']))

    # plot curves for T and AT
    def sinsq(x, a, b, c, d):
        return a*np.sin(b*np.deg2rad(x) + c)**2 + d

    popt_W_T_eta, pcov_W_T_eta = curve_fit(sinsq, chi_eta, W_min_T, maxfev = 10000)
    popt_W_AT_eta, pcov_W_AT_eta = curve_fit(sinsq, chi_eta, W_min_AT, maxfev = 10000)
    #print('popt_W are:', popt_W_AT_eta) 
    popt_Wp_T_eta, pcov_Wp_T_eta = curve_fit(sinsq, chi_eta, Wp_T, maxfev = 10000)
    popt_Wp_AT_eta, pcov_Wp_AT_eta = curve_fit(sinsq, chi_eta, Wp_AT)
    
    chi_eta_ls = np.linspace(min(chi_eta), max(chi_eta), 1000)

    ax.plot(chi_eta_ls, sinsq(chi_eta_ls, *popt_W_T_eta), label='$W_T$', color='navy')
    ax.plot(chi_eta_ls, sinsq(chi_eta_ls, *popt_W_AT_eta), label='$W_{AT}$', linestyle='dashed', color='blue')
    ax.errorbar(chi_eta, W_min_expt, yerr=W_min_unc, fmt='o', color='slateblue', markersize=10)

    ax.plot(chi_eta_ls, sinsq(chi_eta_ls, *popt_Wp_T_eta), label="$W_{T}'$", color='crimson')
    ax.plot(chi_eta_ls, sinsq(chi_eta_ls, *popt_Wp_AT_eta), label="$W_{AT}'$", linestyle='dashed', color='red')
    ax.errorbar(chi_eta, Wp_expt, yerr=Wp_unc, fmt='o', color='salmon', markersize=10)
    #ax.set_title(f'$\eta = 45\degree$', fontsize=18)
    ax.set_ylabel('Witness value', fontsize=22)
    ax.tick_params(axis='both', which='major', labelsize=20)
    ax.set_xlabel('$\chi$ (deg)', fontsize=22)
    ax.axhline(y=0, color='black')
    # ax[1,i].set_ylabel('Value', fontsize=31)
    # ax[1,i].legend()

    plt.text(55.5, 0.11, 
        r'$|\varphi_1\rangle = \cos{(\frac{\chi}{2})}|HD\rangle - \sin{(\frac{\chi}{2})}|VA\rangle$' + '\n' +
        r'$|\varphi_2\rangle = \cos{(\frac{\chi}{2})}|HR\rangle - \sin{(\frac{\chi}{2})}|VL\rangle$' + '\n' +
        r'$\rho = 0.65|\varphi_1\rangle\langle \varphi_1| + 0.35|\varphi_2\rangle\langle\varphi_2|$',  
        size=18, va="baseline", ha="right", multialignment="left",
        bbox=dict(fc="none"))
    
    plt.suptitle('Entangled State Witnessed by 3rd W\' Triplet', fontsize=25)
    plt.tight_layout()
    plt.savefig(join(DATA_PATH, f'{file_name}.pdf'))
    plt.show()

if __name__ == '__main__':
    file_name = 'analysis_rho_summer_2024_hdminusva_hrminusvl_mix6535.csv'
    DATA_PATH = 'hrivl_hdiva_mix_flippedminus'
    
    make_plots_E0(DATA_PATH, file_name)
    
### Text for making other plots

# WP1 in Bell State Form
# plt.text(58.6, 0.136, 
#          r'$\varphi_1 = \cos{(\chi)}|\Phi^+\rangle + \sin(\chi) e^{i\frac{\pi}{4}}|\Phi^-\rangle$' + '\n' +
#          r'$\varphi_2 = \cos{(\chi)}|\Psi^+\rangle + \sin(\chi) e^{i\frac{\pi}{4}}|\Psi^-\rangle$' + '\n' +
#          r'$\rho = 0.65|\varphi_1\rangle\langle \varphi_1| + 0.35|\varphi_2\rangle\langle\varphi_2|$',  
#          size=18, va="baseline", ha="right", multialignment="left",
#          bbox=dict(fc="none"))

# WP1
    # plt.text(55.8, 0.13, 
    #     r'$|\varphi_1\rangle = \cos{(\frac{\chi}{2})}|HH\rangle - i\sin{(\frac{\chi}{2})}|VV\rangle$' + '\n' +
    #     r'$|\varphi_2\rangle = \cos{(\frac{\chi}{2})}|HV\rangle - i\sin{(\frac{\chi}{2})}|VH\rangle$' + '\n' +
    #     r'$\rho = 0.65|\varphi_1\rangle\langle \varphi_1| + 0.35|\varphi_2\rangle\langle\varphi_2|$',  
    #     size=18, va="baseline", ha="right", multialignment="left",
    #     bbox=dict(fc="none"))

# WP3 State
# plt.text(55.5, 0.11, 
#         r'$\varphi_1 = \cos{(\frac{\chi}{2})}|HD\rangle - \sin{(\frac{\chi}{2})}|VA\rangle$' + '\n' +
#         r'$\varphi_2 = \cos{(\frac{\chi}{2})}|HR\rangle - \sin{(\frac{\chi}{2})}|VL\rangle$' + '\n' +
#         r'$\rho = 0.65|\varphi_1\rangle\langle \varphi_1| + 0.35|\varphi_2\rangle\langle\varphi_2|$',  
#         size=18, va="baseline", ha="right", multialignment="left",
#         bbox=dict(fc="none"))